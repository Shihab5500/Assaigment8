
import React, { useEffect, useMemo, useState } from "react";
import useAppsData from "../hooks/useAppsData";
import AppCard from "../component/AppCard";
import NotFound from "../component/NotFound";

// ‡¶ê‡¶ö‡ßç‡¶õ‡¶ø‡¶ï Loader ‡¶ï‡¶Æ‡ßç‡¶™‡ßã‡¶®‡ßá‡¶®‡ßç‡¶ü (‡¶Ø‡¶¶‡¶ø ‡¶Ü‡¶≤‡¶æ‡¶¶‡¶æ Loader.jsx ‡¶®‡¶æ ‡¶•‡¶æ‡¶ï‡ßá)
const Loader = ({ label = "Loading..." }) => (
  <div className="flex items-center justify-center py-10">
    <div className="inline-flex items-center gap-3">
      <span className="w-4 h-4 rounded-full border-2 border-violet-600 border-t-transparent animate-spin" />
      <span className="text-sm text-gray-600">{label}</span>
    </div>
  </div>
);

export default function Apps() {
  const { apps, loading } = useAppsData();
  const [query, setQuery] = useState("");
  const [searchLoading, setSearchLoading] = useState(false);

  // üîπ ‡¶°‡¶ø‡¶¨‡¶æ‡¶â‡¶®‡ßç‡¶∏ ‡¶ï‡¶∞‡¶æ ‡¶∏‡¶æ‡¶∞‡ßç‡¶ö ‡¶á‡¶´‡ßá‡¶ï‡ßç‡¶ü
  useEffect(() => {
    if (!query.trim()) {
      setSearchLoading(false);
      return;
    }
    setSearchLoading(true);
    const t = setTimeout(() => setSearchLoading(false), 500); // ‡ß¶.‡ß´ ‡¶∏‡ßá‡¶ï‡ßá‡¶®‡ßç‡¶° delay
    return () => clearTimeout(t);
  }, [query]);

  // üîπ ‡¶ï‡ßá‡¶∏ ‡¶á‡¶®‡¶∏‡ßá‡¶®‡¶∏‡¶ø‡¶ü‡¶ø‡¶≠ ‡¶´‡¶ø‡¶≤‡ßç‡¶ü‡¶æ‡¶∞
  const filtered = useMemo(() => {
    const q = query.trim().toLowerCase();
    if (!q) return apps;
    return apps.filter((a) => a.title.toLowerCase().includes(q));
  }, [apps, query]);

  return (
    <div className="max-w-7xl mx-auto py-16 px-4">
      <h2 className="text-3xl font-bold text-center">Our All Applications</h2>
      <p className="text-gray-500 text-center mt-2 mb-10">
        Explore All Apps on the Market developed by us. We code for Millions.
      </p>

      {/* ‡¶ü‡¶™ ‡¶¨‡¶æ‡¶∞ */}
      <div className="flex items-center justify-between gap-4 mb-4">
        <p className="text-lg font-bold text-gray-900">
          ({filtered.length}) Apps Found
        </p>

        {/* ‡¶∏‡¶æ‡¶∞‡ßç‡¶ö ‡¶á‡¶®‡¶™‡ßÅ‡¶ü */}
        <div className="relative w-full max-w-xs">
          <span className="absolute inset-y-0 left-3 flex items-center pointer-events-none text-gray-400">
            <svg width="16" height="16" viewBox="0 0 24 24" fill="none">
              <path
                d="M21 21l-4.3-4.3m1.3-4.2a7 7 0 1 1-14 0 7 7 0 0 1 14 0Z"
                stroke="currentColor"
                strokeWidth="2"
                strokeLinecap="round"
                strokeLinejoin="round"
              />
            </svg>
          </span>
          <input
            value={query}
            onChange={(e) => setQuery(e.target.value)}
            placeholder="Search Apps"
            className="w-full rounded-lg border border-gray-300 pl-9 pr-3 py-2 text-sm focus:outline-none focus:ring-2 focus:ring-violet-500 focus:border-violet-500"
          />
          {/* ‡¶á‡¶®‡¶™‡ßÅ‡¶ü‡ßá ‡¶ü‡¶æ‡¶á‡¶™ ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶∏‡¶Æ‡ßü ‡¶≤‡ßã‡¶°‡¶ø‡¶Ç ‡¶Ü‡¶á‡¶ï‡¶® */}
          {searchLoading && (
            <span className="absolute right-3 top-2.5 w-4 h-4 border-2 border-violet-500 border-t-transparent rounded-full animate-spin"></span>
          )}
        </div>
      </div>

      {/* ‡¶™‡ßç‡¶∞‡¶æ‡¶•‡¶Æ‡¶ø‡¶ï ‡¶°‡ßá‡¶ü‡¶æ ‡¶≤‡ßã‡¶° */}
      {loading && (
        <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-6">
          {Array.from({ length: 12 }).map((_, i) => (
            <div key={i} className="h-56 rounded-lg bg-gray-100 animate-pulse" />
          ))}
        </div>
      )}

      {/* ‡¶∏‡¶æ‡¶∞‡ßç‡¶ö ‡¶≤‡ßã‡¶°‡¶ø‡¶Ç */}
      {!loading && searchLoading && <Loader label="Searching..." />}

      {/* ‡¶∞‡ßá‡¶ú‡¶æ‡¶≤‡ßç‡¶ü */}
      {!loading && !searchLoading && filtered.length > 0 && (
        <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-6">
          {filtered.map((app) => (
            <AppCard key={app.id} app={app} />
          ))}
        </div>
      )}

      {/* ‡¶ï‡¶ø‡¶õ‡ßÅ ‡¶®‡¶æ ‡¶™‡ßá‡¶≤‡ßá */}
      {!loading && !searchLoading && filtered.length === 0 && (
        <NotFound
          title="OPPS!! APP NOT FOUND"
          subtitle="The App you are requesting is not found on our system. Please try another apps."
          onBack={() => setQuery("")}
        />
      )}
    </div>
  );
}
